<%= stylesheet_link_tag "hoverscroll" %>
<%= stylesheet_link_tag "jquery.minicolors" %>
<%= stylesheet_link_tag "jquery.qtip.min.css" %>

<script>
//SHARED GLOBALS
var GRID_SIZE = 30;
var GRID_HEIGHT = 8;
var VOXEL_SIZE = 50;

var FRAMES_PER_SEC = 20;

//inputHandlers
var cameraRotateMode = false, deleteMode = false;
var mouse2D = new THREE.Vector3(0.5, 10000, 0);

//CONTROLLER
var controller;
var mainGrid = [];

//RUN MODE and SWITCHING
var pause = false;
var buildMode = true;
var saveState = [];
var movement_delta = new THREE.Vector3(0,0,0);

//BUILD GLOBALS
//mesh arrays
var objectMeshes = [];	//stores each type of obj:
						//	geometry, material, block_num
						//	category, scale, dimensions (by voxel),
						//	offsets, blocks (each array of 4, 1 per rotation)
var sceneObjects = [];	// handle to scene obj
var gadgets = [];		// handle to gadgets (to reset animations)

var currSceneID = 0;	

//initial object loading
var JSONLoader;
var NObjectsToLoad;		
var cubeGeo, defaultMaterial;

//rollover helper
var rollOverMesh;
var rollOverErrorMesh;
var rollOverMaterial, rollOverErrorMaterial;

//handles to currObject
var currMeshID = 0;
var currObj;
var currRotation = 0;
var currBlockList = [0,0,0];
var currOffset;

var currColor = "#fcd87f";

//scene handles
var container, renderer;
var canvas_width, canvas_height;
var scene, camera, plane;
var theta = 0; //camera rotation
var projector, raycaster;

var ROTATION_AXIS = new THREE.Vector3(0,1,0);

//intersection testing, positioning
var objectWorldPosition = new THREE.Vector3(-VOXEL_SIZE/2, VOXEL_SIZE/2,-VOXEL_SIZE/2);
var gridPosition = [0,0,0];
var tmpVec = new THREE.Vector3();
var normalMatrix = new THREE.Matrix3();
var idx, intersector;

$(function(){
	$("#intro .close").click(function(){
		$("#intro").fadeOut( 100, function(){ $("#controls").fadeIn(); });
	});

	$('.loading').show();
	if ( ! Detector.webgl )  {
		Detector.addGetWebGLMessage();	
		$('.loading').hide();
		$("#toolbox").hide();
		return;	
	}

	$( ".object" ).qtip({
		position: {
			my: 'bottom center',  
			at: 'top center'
		},
		style: {
			classes: 'qtip-rounded',
		}
	});

	$('input.minicolors').minicolors({
		animationSpeed: 100,
	    animationEasing: 'swing',
	    change: function( hex, opacity ){
	    	currColor = hex;
	    },
	    changeDelay: 0,
	    control: 'hue',
	    defaultValue: '#fcd87f',
	    inline: false,
	    position: "top",
	    swatchPosition: 'left',
	    textfield: false,
	    theme: 'default'
	});

	$(".title").click( function(){ $(this).next().s(); } , function(){ $(this).next().fadeOut(); } );

	//TOOLBOX: tabs, hover-scroll
	$("#toolbox").organicTabs({ });
	$('.scroll-div').hoverscroll({fixedArrows: true, width: 600, height: 100});
	// Starting the movement automatically at loading
	// @param direction: right/bottom = 1, left/top = -1
	// @param speed: Speed of the animation (scrollPosition += direction * speed)
	var direction = 0, speed = 0;
	$(".scroll-div")[0].startMoving(direction, speed);

	$(".button").hide();
	$('.buildmode').show();
	$('.runmode').hide();
	$(".button.mode").click( switchMode );
	$(".button.clear").click( clearScene );
	$(".button.rerun").click( rerun );

	//DISPLAY
	initGraphics("grid_container");
	
	$.ajax({
		url: '/home/get_all_objects',
		dataType: 'json',
		data: { },
		success: function( obj ){
			loadObjects(obj);
		}
	});

	controller = new RubeJectController();
	// Testing moved to controller_test.js
	// new ControllerTest();
	
	//controller.InitiateAnimation();
	var hasNextFrame = true;
	//while (hasNextFrame) {
	//	hasNextFrame = controller.UpdateAnimation();
	//}
});

</script>

<div class='sidebar-container' class='buildmode'>
	<div id="intro" class='sidebar'>
		<a href='javascript:;' class='close'>[X]</a>
		<h1>Rubeworks</h1> 
		<div style="margin: 10px 0;">
			An interactive WebGL experiment using <a href="http://threejs.org/">three.js</a> to create unusual machines from basic components<br/><br/>
			CS194 Project by Amy Zou, Austin Hulse, Emily Ye, and Sonya Juang
		</div>
		<h2>Controls</h2>
		<div>
			<b>SHIFT</b> - Hold to rotate canvas<br/>
			<b>D</b> - Hold, click to delete object<br/>
			<b>R</b> - Press to rotate object<br/>
		</div>
	</div>

	<div id="controls" style="display:none">
		<h2>Controls</h2>
		<div>
			<b>SHIFT</b> - Hold to rotate canvas<br/>
			<b>D</b> - Hold, click to delete object<br/>
			<b>R</b> - Press to rotate object<br/>
		</div>
	</div>
</div>

<div id="button_container">
	<div class='button mode buildmode'>Run</div>
	<div class='button clear buildmode'>Clear</div>
	<div class='button mode runmode'>Stop</div>
	<div class='button rerun runmode'>Rerun</div>

</div>
<div class='loading'>Loading...</div>
<div id='add_starting' class='instructions'>Don't forget to add a starting object!</div>
<div id='delete_obj' class='instructions'>Keep holding D and click on an object to remove.</div>
<div id='rotate_cam' class='instructions'>Move mouse to change direction/speed of rotation.</div>
<div id='grid_container'>
</div>

<div id="tools" class='buildmode'>
	<table>
		<tr>
			<td class='col_color' style='width: 200px'>
				<h3 style="margin-bottom:10px;">Add an <a href='javascript:;' onclick="$('.nav-five a').click();" style="text-decoration:underline">initial force</a> where you want to start the machine!</h3>
				<h3>Choose Object Color<span style="margin-left:5px;"><input class="minicolors"></input></span></h3>
			<td>
			<td class='col_objects'>
				<div id="toolbox">
					<ul class="nav">
						<li class="nav-one"><a href="#cat1" class="current">Inerts</a></li>
						<li class="nav-two"><a href="#cat2">Roamers</a></li>
						<li class="nav-three"><a href="#cat3">Carriers</a></li>
						<li class="nav-four"><a href="#cat4">Gadgets</a></li>
						<li class="nav-five"><a href="#cat5">Initial Forces</a></li>
					</ul>
				 
				    <div class="list-wrap">
				    	<div id="cat1">    		
				    		<%= render :partial => "tabs", :locals => {:tabset => @inerts}  %>
				    	</div>
				        		 
				       	<div id="cat2" class="hide">
				    		<%= render :partial => "tabs", :locals => {:tabset => @roamers}  %>
				    	</div>

						<div id="cat3" class="hide">
					    	<%= render :partial => "tabs", :locals => {:tabset => @carriers}  %>
						</div>

						<div id="cat4" class="hide">
					   		<%= render :partial => "tabs", :locals => {:tabset => @gadgets}  %>
						</div>

						<div id="cat5" class="hide">
					   		<%= render :partial => "tabs", :locals => {:tabset => @starters}  %>
						</div>
					</div>
				</div>
			</td>
		</tr>
	</table>
</div> 	



