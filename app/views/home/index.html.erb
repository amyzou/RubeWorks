<%= stylesheet_link_tag "hoverscroll" %>

<script>

//SHARED GLOBALS
var buildMode = true;

var controller;

var mainGrid = [];
var GRID_SIZE = 20;
var GRID_HEIGHT = 10;
var VOXEL_SIZE = 50;

var objectMeshes = [];
var NObjectsToLoad;

var sceneObjects = [];
var currSceneID = 0;

//inputHandlers
var keyeventhandler;
var mouseeventhandler;
var shiftDown = false, ctrlDown = false;
var mouse2D = new THREE.Vector3(0, 10000, 0.5);


//RENDERING 
var container, renderer;
var canvas_width, canvas_height;
var scene, camera, plane;
var projector, raycaster;

var theta = 45 * 0.5;

var shiftDown = false, ctrlDown = false;
var rollOveredFace;

var cubeGeo;
var rollOverMesh, rollOverMaterial;
var rollOverErrorMaterial;
var defaultMaterial;
var currMeshID = 0;

var scaleVec = new THREE.Vector3(VOXEL_SIZE/2, VOXEL_SIZE/2, VOXEL_SIZE/2);
var tmpVec = new THREE.Vector3();
var normalMatrix = new THREE.Matrix3();
var i, intersector;

var objectWorldPosition = new THREE.Vector3();
var gridPosition = new THREE.Vector3();

var objLoader;	
var JSONLoader;

$(function(){
	if ( ! Detector.webgl )  {
		Detector.addGetWebGLMessage();	
		$("#toolbox").hide();
		return;	
	}

	//TOOLBOX: tabs, hover-scroll
	$("#toolbox").organicTabs({ });
	$('.scroll-div').hoverscroll({fixedArrows: true, width: 800, height: 105});
	// Starting the movement automatically at loading
	// @param direction: right/bottom = 1, left/top = -1
	// @param speed: Speed of the animation (scrollPosition += direction * speed)
	var direction = 0, speed = 0;
	$(".scroll-div")[0].startMoving(direction, speed);
	

	if ( ! Detector.webgl ) 
		Detector.addGetWebGLMessage();

	// Currently prints to console, but could potentially be used to load object on click. 
	$(".object").click(
		function(){
			setCurrentObject( $(this).attr('id') );
		}
	);

	//DISPLAY
	initGraphics("grid_container");
	
	$.ajax({
		url: '/home/get_all_objects',
		dataType: 'json',
		data: { },
		success: function( obj ){
			loadObjects(obj);
		}
	});

	// Testing constructor: 
	/*objectPropertyID = 4;
	objectPosition = [0,0,0];
	for (var i = 0; i < 4; i ++) {
		console.log("Sending a property ID of " + objectPropertyID);
		var block = new RubeJect(objectPropertyID, objectPosition, i);
		
		console.log(block.name + "; " + block.blockList[0]);
		console.log(block.name + "; " + block.blockList[1]);
		console.log(block.name + "; " + block.blockList[2]);
		console.log(block.name + "; " + block.blockList[3]);
	} 
	for (var i = 0; i < 4; i ++) {
		block.rotate();
		//console.log("has outface: " + block.getOutFaceByIndex(0) + " with rotation " + block.rotation);
	} */

	// CONTROLLER TESTING THINGS ----------------------------------------------------------
	console.log("CONTROLLER TESTING ----------------------------------------------------------");
	var controller = new RubeJectController();

	// Instantiate objects needed.
	var blocks = new Array();
	blocks.push(new RubeJect(1,[1,0,5],0)); blocks.push(new RubeJect(1,[2,0,5],0)); 
	blocks.push(new RubeJect(1,[6,0,0],0));
	var arrow = new RubeJect(7,[0,0,6],0);
	var sphere = new RubeJect(5,[1,0,6],0);
	var ramp = new RubeJect(4,[3,0,3],0);

	// Add all objects to controller.
	for (var i = 0; i < blocks.length; i++) {controller.AddObject(blocks[i], false);}
	controller.AddObject(arrow,true); controller.AddObject(ramp,false); controller.AddObject(sphere,false); 
	//controller.PrintAllObjects();
	//controller.PrintAllStartingObjects();
	//controller.PrintGrid();

	// Test chaining
	controller.CreateChains();
	console.log("ENDING TESTING OF CONTROLLER -----------------------------------------------");
	// Ending testing of controller ------------------------------------------------------

	animate();
});

</script>
<div id='grid_container'>
</div>

<div id="toolbox">
					
	<ul class="nav">
		<li class="nav-one"><a href="#cat1" class="current">Inerts</a></li>
		<li class="nav-two"><a href="#cat2">Roamers</a></li>
		<li class="nav-three"><a href="#cat3">Carriers</a></li>
		<li class="nav-four"><a href="#cat4">Gadgets</a></li>
	</ul>
    		
    <div class="list-wrap">
    	<div id="cat1">    		
    		<%= render :partial => "tabs", :locals => {:tabset => @inerts}  %>
    	</div>
        		 
       	<div id="cat2" class="hide">
    		<%= render :partial => "tabs", :locals => {:tabset => @roamers}  %>
    	</div>

		<div id="cat3" class="hide">
	    	<%= render :partial => "tabs", :locals => {:tabset => @carriers}  %>
		</div>

		<div id="cat4" class="hide">
	   		<%= render :partial => "tabs", :locals => {:tabset => @gadgets}  %>
		</div>

	</div> <!-- END List Wrap -->
</div> <!-- END toolbox  -->	


