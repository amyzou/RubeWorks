<%= stylesheet_link_tag "hoverscroll" %>

<script>
//SHARED GLOBALS
var GRID_SIZE = 30;
var GRID_HEIGHT = 8;
var VOXEL_SIZE = 50;

//inputHandlers
var cameraRotateMode = false, deleteMode = false;
var mouse2D = new THREE.Vector3(0.5, 10000, 0);

//CONTROLLER
var controller;
var mainGrid = [];

//RUN MODE and SWITCHING
var pause = false;
var buildMode = true;
var saveState = [];
var movement_delta = new THREE.Vector3(0,0,0);

//BUILD GLOBALS
//mesh arrays
var objectMeshes = [];	//stores each type of obj:
						//	geometry, material, block_num
						//	category, scale, dimensions (by voxel),
						//	offsets, blocks (each array of 4, 1 per rotation)
var sceneObjects = [];	// handle to scene obj (to move later)
var currSceneID = 0;	

//initial object loading
var JSONLoader;
var NObjectsToLoad;		
var cubeGeo, defaultMaterial;

//rollover helper
var rollOverMesh;
var rollOverErrorMesh;
var rollOverMaterial, rollOverErrorMaterial;

//handles to currObject
var currMeshID = 0;
var currObj;
var currRotation = 0;
var currBlockList = [0,0,0];
var currOffset;

//scene handles
var container, renderer;
var canvas_width, canvas_height;
var scene, camera, plane;
var theta = 0; //camera rotation
var projector, raycaster;

var ROTATION_AXIS = new THREE.Vector3(0,1,0);

//intersection testing, positioning
var objectWorldPosition = new THREE.Vector3(-VOXEL_SIZE/2, VOXEL_SIZE/2,-VOXEL_SIZE/2);
var gridPosition = [0,0,0];
var tmpVec = new THREE.Vector3();
var normalMatrix = new THREE.Matrix3();
var idx, intersector;

$(function(){
	$('.loading').show();
	if ( ! Detector.webgl )  {
		Detector.addGetWebGLMessage();	
		$("#toolbox").hide();
		return;	
	}

	//TOOLBOX: tabs, hover-scroll
	$("#toolbox").organicTabs({ });
	$('.scroll-div').hoverscroll({fixedArrows: true, width: 800, height: 112});
	// Starting the movement automatically at loading
	// @param direction: right/bottom = 1, left/top = -1
	// @param speed: Speed of the animation (scrollPosition += direction * speed)
	var direction = 0, speed = 0;
	$(".scroll-div")[0].startMoving(direction, speed);

	if ( ! Detector.webgl ) 
		Detector.addGetWebGLMessage();

	$(".button").hide();
	$('.buildmode').show();
	$('.runmode').hide();
	$(".button").click( switchMode );

	//DISPLAY
	initGraphics("grid_container");
	
	$.ajax({
		url: '/home/get_all_objects',
		dataType: 'json',
		data: { },
		success: function( obj ){
			loadObjects(obj);
		}
	});

	controller = new RubeJectController();
	// Testing moved to controller_test.js
	new ControllerTest();
	
	controller.InitiateAnimation();
	var hasNextFrame = true;
	//while (hasNextFrame) {
	//	hasNextFrame = controller.UpdateAnimation();
	//}

	console.log("ENDING TESTING OF CONTROLLER --------------------------------");
	controller.ReInitializeAll();
	console.log("RESETTED CONTROLLER -----------------------------------------");

	// Ending testing of controller -----------------------------------------

});

</script>
<div class='loading'>Loading...</div>
<div id='grid_container'>
</div>

<div id="toolbox" class='buildmode'>
					
	<ul class="nav">
		<li class="nav-one"><a href="#cat1" class="current">Inerts</a></li>
		<li class="nav-two"><a href="#cat2">Roamers</a></li>
		<li class="nav-three"><a href="#cat3">Carriers</a></li>
		<li class="nav-four"><a href="#cat4">Gadgets</a></li>
		<li class="nav-five"><a href="#cat5">Initial Forces</a></li>
	</ul>
    		
    <div class="list-wrap">
    	<div id="cat1">    		
    		<%= render :partial => "tabs", :locals => {:tabset => @inerts}  %>
    	</div>
        		 
       	<div id="cat2" class="hide">
    		<%= render :partial => "tabs", :locals => {:tabset => @roamers}  %>
    	</div>

		<div id="cat3" class="hide">
	    	<%= render :partial => "tabs", :locals => {:tabset => @carriers}  %>
		</div>

		<div id="cat4" class="hide">
	   		<%= render :partial => "tabs", :locals => {:tabset => @gadgets}  %>
		</div>

		<div id="cat5" class="hide">
	   		<%= render :partial => "tabs", :locals => {:tabset => @starters}  %>
		</div>

	</div> <!-- END List Wrap -->
</div> 	

<div id="button_container">
	<div class='button buildmode'>Run</div>
	<div class='button runmode'>Stop</div>
</div>

